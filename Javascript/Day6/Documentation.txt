Object Oriented Javascript
	Creating
		Class
		Constructor
		Fields
	Small UI Framework which is similar to React
	
React 
	Web	
	Node
	
Node	
	Basics
	Adding/Updating Modules
	React with Node
	
Node 
	Express

	
	
React -> React Concepts + HTML
React Native -> React Concepts + JSX + 3rd modules
	3rd modules
		Bluetooth Integration
		Caching
		Camera Capture
		List
		NativeBase
		

Day 1
typeof
Viewing
	Alert
	console.log

var - default keyword for creating variables - variant
variable can be created for type of
	Number
	String
	Object
	Function
	
	
function Addition( x, y){
	return x + y;
}

var Addition = function(x, y){
	return x + y;
}

var isFunctionExists = function(type){
	return type != "undefined";
}

var exists = isFunctionExists(typeof(Subtrac));
console.log(exists);

var isNumeric = function(value){
	return typeof(value) == 'number';
}

Assignment -> isString
		   -> isBool

// Creating object
	Key Value pair
	Key - String
	Value - Object
		  - Nested Object
		  - Any primitive types ( Number, String..)
		  - Function
		  - Nested Function
		  
	retrieval - object.key or object[key]
	
		  
var calculator = {
	addition: function(x, y){
		return x + y;
	},
	subtraction: function(x, y){
		return x - y;
	}
}; 
Assignment -> Multiplication
		   -> Division
		   
		   -> Add drop down having items Add, Sub, Div, Mul. Based on selection, calculate C
		   
		   
// Day 2
Creating a class and one public method
var Calculations = function(){
	return {
		// Public method
		Addition: function(x, y) {
			return x +y;
		}
	}
}
var obj = new Calculations();
var sum = obj.Addition();
console.log(sum);

// Creating a class with Constructor and accessing those values inside other function. Here x and y are like global variables to class.
var Calculations2 = function(x, y){
	return {
		Addition: function() {
			return x + y;
		}
	}
}
var obj = new Calculations2(1, 5);
var sum = obj.Addition();
console.log(sum);

// Arrays
var students = ["A", "B", "C", "D"];
for(var index in students){
	var student = students[index];
	console.log(student);
}

var ArrayCalculator = function(){
	return {
		printArray: function(items){
			for(var index in items){
				var item = items[index];
				console.log(item);
			}
		}
	};
}


// Day 3
Project - Single clients ex: test3.html
Core - Meant for all clients ex: Framework.js
Core - Meant for complete reusability

1 == 1
true
1 == "1"
true
1 === 1
true
1 === "1"
false

// Day 4
Events
Javascript interaction with HTML. It can be browser manipulating page ex: onLoad or user manipulating the page ex: onClick, onDoubleClick
Events used so far
mouseover
click
keyup


Example of try catch 
try {
	var x = Framework.GetNumericValue('ValueC2');
}
catch(err) {
	alert('error');
}

// Day 5

// Iterate
var students = ["Arjun", "Deepthi", "Chakri"];
//Approach 1
for(var index = 0; index < students.length; index ++){
	console.log(index);
	console.log(students[index]);
}
// Approach 2
for(var index in students){
	console.log(index);
	console.log(students[index]);
}
// Approach 3
for(var student of students){
	console.log(student);
}

var student = { FirstName: 'Arjun', LastName: 'Reddy'}
//Approach 1 - fails here and it works only for Array and not for Object
for(var index = 0; index < student.length; index ++){
	console.log(index);
	console.log(student[index]);
}
// Approach 2 - it works both for Array and Object. In case of Array, index is like number array starting from 0 to length -1. In case of Object, index is key of object
for(var index in student){
	console.log(index);
	console.log(student[index]);
}
// Approach 3 - fails here and it works only for Array and not for Object 
for(var item of student){
	console.log(item);
}

// class

// Syntax 1
var className = function(){
	// private fields
	// private methods
	return {
		// public fields
		// public methods
	}
}


// Syntax 2
var className = function(){
	// private fields
	// private methods
	
	
	this. 
	// public fields
	// public methods
}

Day 6 
//
Create class
Create childChild and inheriting parent. Methods can be overided inside child class
Create private, public and global variables
Create private, public and global methods
Create workflow -> constructor, componentWillMount, render, componentDidMount
call backs
for loops
events, listeners




